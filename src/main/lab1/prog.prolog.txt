% Some simple test Prolog programs
% --------------------------------

% Knowledge bases

%bestiary : creature / type of creature
creature(a,b).
creature(c,b).
creature(d,e).
creature(f,g).
creature(h,j).


witcher(Gerald).
witcher(Leto).

witcher_health(Gerald, 200).
witcher_health(Leto, 150).

potion_against_creature(name_potion1, type_creature1).
potion_against_creature(name_potion2, type_creature2).
potion_against_creature(name_potion3, type_creature3).
potion_against_creature(name_potion3, type_creature3).

oil_against_creature(name_oil1, type_creature3).
oil_against_creature(name_oil2, type_creature4).

bomb_against_creature(name_bomb1, type_creature1).
bomb_against_creature(name_bomb2, type_creature3).
bomb_against_creature(name_bomb3, type_creature5).



fight(_,[]). %условие завершения( _ - наличие ведьмаков, []-отсутсивие монстров)
fight(W, C) :-
    witcher(X), % выбираем ведьмака
    member(X, W), % который есть в живых
    creature(Y), % выбираем существо
    member(Y, C), % которое есть в живых
    witcher_vs_creature(X, Y, W, C, WW, CC), % бой между ведьмаком и существом
    fight(WW, CC). % продолжаем бой с обновленными списками



witcher_vs_creature(X, Y, W, C, WW, CC) :-
    witcher_health(X, WX),
    creature_health(Y, WY),
    (
      WX > WY -> excl(Y, C, CC), WW = W; % Если ведьмак побеждает, исключаем существо
      excl(X, W, WW), CC = C % Если существо побеждает, исключаем ведьмака
    ).


%rules
    % witcher / creature
choose_addition_to_fight_for_witcher(X, Y) :-
    addition(Z),
    member(Z, witcher_has(X)),
    excl(Z, A, AA),
    use(Z, X).


% Удаление элемента из списка
excl(_, [], []) :- !.
excl(H, [H|T], T) :- !.
excl(X, [H|T], [H|TT]) :- excl(X, T, TT).

TODO добавить список рюкзака ведьмаков
TODO создать списки ведьмаков и существ
TODO раздать здоровья существам creature_health